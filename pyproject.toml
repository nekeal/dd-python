[tool.poetry]
name = "dd-python"
version = "0.0.1"
description = "Python implementation of Domain Drivers course"
authors = [
    "nekeal <szymon.sc.cader@gmail.com>",
]
license = "MIT"
readme = "README.md"

documentation = "https://nekeal.github.io/dd-python"
homepage = "https://nekeal.github.io/dd-python"
repository = "https://github.com/nekeal/dd-python"

classifiers = [
  "Development Status :: 4 - Beta",
  "Intended Audience :: Developers",
  "Operating System :: OS Independent",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.11",
  "Topic :: Software Development :: Libraries :: Python Modules",
  "Typing :: Typed",
]

packages = [
    { include = "smartschedule", from = "src" }
]

[tool.poetry.dependencies]
python = ">=3.11, <4.0"

[tool.poetry.group.dev.dependencies]
mypy = "*"
pre-commit = "*"
pymdown-extensions = "*"
pytest = "*"
pytest-github-actions-annotate-failures = "*"
pytest-cov = "*"
python-kacl = "*"
ruff = "*"
import-linter = "^2.0"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.ruff]
target-version = "py311"
exclude = [
    ".git",
    "__pycache__",
    "build",
    "dist",
    ".venv",
    ".eggs",
    ".tox",
]

[tool.ruff.lint]
ignore = [
    # flake8-builtins
    # the likelihood of running into an issue when shadowing a buildin
    # with a class attribute is very low
    "A003",
    # flake8-bugbear
    # fastapi recommends to use `Depend()` as an argument default.
    # Unfortunately, exceptions are hardcoded in bugbear.
    # https://github.com/PyCQA/flake8-bugbear/issues/62
    "B008",
]
select = [
    "A", # flake8 builtins
    "E", # pycodestyle error
    "W", # pycodestyle warning
    "F", # pyflakes
    "N", # pep8-naming
    "UP", # pyupgrade
    "B", # flake8-bugbear
    "I", # isort
    "C4", # flake8-comprehensions
    "T10", # flake8-debugger
    "ERA", # flake8-eradicate
    "G", # flake8-logging-format
    "C9", # mccabe
]
[tool.ruff.lint.per-file-ignores]
"tests/**" = [
    "S101",     # "Use of `assert` detected"
    "ARG",      # "Unused function argument". Fixtures are often unused.
    "S105",     # "Possible hardcoded password".
]

[tool.ruff.lint.mccabe]
max-complexity = 10

[tool.ruff.lint.pep8-naming]
classmethod-decorators = [
    "classmethod",
]

[tool.pytest.ini_options]
addopts = """\
    --cov smartschedule \
    --cov tests \
    --cov-report term-missing \
    --no-cov-on-fail \
"""

[tool.coverage.report]
exclude_lines = [
    'if TYPE_CHECKING:',
    'pragma: no cover'
]

[tool.mypy]
# This is the global mypy configuration.
# Avoid changing this!
strict = true  # See all the enabled flags `mypy --help | grep -A 10 'Strict mode'`
disallow_any_unimported = true
# exclude tests

[[tool.mypy.overrides]]
module = [
    "tests.*",
]
disallow_untyped_defs = false
# If you need to ignore something for some specific module,
# add overrides for them. Avoid changing the global config!
# For example:
# [[tool.mypy.overrides]]
# module = [
#  "my_unpyted_dependency1.*",
#  "my_unpyted_dependency2.*"
# ]
# ignore_missing_imports = true

# [[tool.mypy.overrides]]
# module = [
#   "tests/my_thing/test_my_thing",
# ]
# disallow_untyped_defs = false

[tool.importlinter]
root_package = "smartschedule"

[[tool.importlinter.contracts]]
name = "Layered architecture"
type = "layers"
layers = [
    "smartschedule.planning.parallelization",
    "smartschedule.sorter",
]
